// Copyright (c) 2023 Elektrobit Automotive GmbH
//
// This program and the accompanying materials are made available under the
// terms of the Apache License, Version 2.0 which is available at
// https://www.apache.org/licenses/LICENSE-2.0.
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations
// under the License.
//
// SPDX-License-Identifier: Apache-2.0

// [impl->swdd~ank-base-provides-object-definitions~1]

syntax = "proto3";
package ank_base;

/**
* A message containing a request to the Ankaios server to update the state or to request the complete state of the Ankaios system.
*/
message Request {
    string requestId = 1;
    oneof RequestContent {
        UpdateStateRequest updateStateRequest = 2; /// A message to Ankaios server to update the state of one or more agent(s).
        CompleteStateRequest completeStateRequest = 3; /// A message to Ankaios server to request the complete state by the given request id and the optional field mask.
    }
}

/**
* A message containing a response from the Ankaios server to a particular request.
* The response content depends on the request content previously sent to the Ankaios server.
*/
message Response {
    string requestId = 1;
    oneof ResponseContent {
        Error error = 3;
        CompleteState completeState = 4;
        UpdateStateSuccess UpdateStateSuccess = 5;
    }
}

/**
* An enum type describing the expected workload state. Used for dependency management.
*/
enum AddCondition {
    ADD_COND_RUNNING = 0; /// The workload is operational.
    ADD_COND_SUCCEEDED = 1; /// The workload has successfully exited.
    ADD_COND_FAILED = 2; /// The workload has exited with an error or could not be started.
}

/**
* A message containing a request for the complete/partial state of the Ankaios system.
* This is usually answered with a [CompleteState](#completestate) message.
*/
message CompleteStateRequest {
    repeated string fieldMask = 1; /// A list of symbolic field paths within the State message structure e.g. 'desiredState.workloads.nginx'.
}

/**
* A message containing a request to update the state of the Ankaios system.
* The new state is provided as state object.
* To specify which part(s) of the new state object should be updated
* a list of update mask (same as field mask) paths needs to be provided.
*/
message UpdateStateRequest {
    CompleteState newState = 1; /// The new state of the Ankaios system.
    repeated string updateMask = 2; /// A list of symbolic field paths within the state message structure e.g. 'desiredState.workloads.nginx' to specify what to be updated.
}

/**
* A message from the server containing the ids of the workloads that have been started and stopped in response to a previously sent UpdateStateRequest.
*/
message UpdateStateSuccess {
    repeated string addedWorkloads = 1; /// Workload istance names of workloads which will be started
    repeated string deletedWorkloads = 2; /// Workload instance names of workloads which will be stopped
}

/**
* A message containing the complete state of the Ankaios system.
* This is a response to the [CompleteStateRequest](#completestaterequest) message.
*/
message CompleteState {
    State desiredState = 1; /// The state the user wants to reach.
    WorkloadStatesMap workloadStates = 2; /// The current execution states of the workloads.
    AgentMap agents = 3; /// The agents currently connected to the Ankaios cluster.
}

/**
* A nested map that provides the execution state of a workload in a structured way.
* The first level allows searches by agent.
*/
message WorkloadStatesMap {
    map<string, ExecutionsStatesOfWorkload> agentStateMap = 1;
}

/**
* A map providing the execution state of a workload for a given name.
*/
message ExecutionsStatesOfWorkload {
    map<string, ExecutionsStatesForId> wlNameStateMap = 1;
}

/**
* A map providing the execution state of a specific workload for a given id.
* This level is needed as a workload could be running more than once on one agent in different versions.
*/
message ExecutionsStatesForId {
    map<string, ExecutionState> idStateMap = 1;
}

/**
* A message containing information about the detailed state of a workload in the Ankaios system.
*/
message ExecutionState {
    string additionalInfo = 1; /// The additional info contains more detailed information from the runtime regarding the execution state.
    oneof ExecutionStateEnum {
        AgentDisconnected agentDisconnected = 2; /// The exact state of the workload cannot be determined, e.g., because of a broken connection to the responsible agent.
        Pending pending = 3; /// The workload is going to be started eventually.
        Running running = 4; /// The workload is operational.
        Stopping stopping = 5; /// The workload is scheduled for stopping.
        Succeeded succeeded = 6; /// The workload has successfully finished its operation.
        Failed failed = 7; /// The workload has failed or is in a degraded state.
        NotScheduled notScheduled = 8; /// The workload is not scheduled to run at any agent. This is signalized with an empty agent in the workload specification.
        Removed removed = 9; /// The workload was removed from Ankaios. This state is used only internally in Ankaios. The outside world removed states are just not there.
    }
}

/**
* The workload was removed from Ankaios. This state is used only internally in Ankaios. The outside world removed states are just not there.
*/
enum Removed {
    REMOVED = 0;
}

/**
* The exact state of the workload cannot be determined, e.g., because of a broken connection to the responsible agent.
*/
enum AgentDisconnected {
    AGENT_DISCONNECTED = 0;
}

/**
* The workload is not scheduled to run at any agent. This is signalized with an empty agent in the workload specification.
*/
enum NotScheduled {
    NOT_SCHEDULED = 0;
}

/**
* The workload is going to be started eventually.
*/
enum Pending {
    PENDING_INITIAL = 0; /// The workload specification has not yet being scheduled
    PENDING_WAITING_TO_START = 1; /// The start of the workload will be triggered once all its dependencies are met.
    PENDING_STARTING = 2; /// Starting the workload was scheduled at the corresponding runtime.
    PENDING_STARTING_FAILED = 8; /// The starting of the workload by the runtime failed.
}

/**
* The workload is operational.
*/
enum Running {
    RUNNING_OK = 0; /// The workload is operational.
}
/**
* The workload is scheduled for stopping.
*/
enum Stopping {
    STOPPING = 0; /// The workload is being stopped.
    STOPPING_WAITING_TO_STOP = 1; /// The deletion of the workload will be triggered once neither 'pending' nor 'running' workload depending on it exists.
    STOPPING_REQUESTED_AT_RUNTIME = 2; /// This is an Ankaios generated state returned when the stopping was explicitly trigged by the user and the request was sent to the runtime.
    STOPPING_DELETE_FAILED = 8; /// The deletion of the workload by the runtime failed.
}

/**
* The workload has successfully finished operation.
*/
enum Succeeded {
    SUCCEEDED_OK = 0; /// The workload has successfully finished operation.
}

/**
* The workload has failed or is in a degraded state.
*/
enum Failed {
    FAILED_EXEC_FAILED = 0; /// The workload has failed during operation
    FAILED_UNKNOWN = 1; /// The workload is in an unsupported by Ankaios runtime state. The workload was possibly altered outside of Ankaios.
    FAILED_LOST = 2; /// The workload cannot be found anymore. The workload was possibly altered outside of Ankaios or was auto-removed by the runtime.
}

/**
* A nested map that provides the names of the connected agents and their optional attributes.
* The first level allows searches by agent name.
*/
message AgentMap {
    map<string, AgentAttributes> agents = 1;
}

/**
* A message containing the CPU usage information of the agent.
*/
message CpuUsage {
    uint32 cpu_usage = 1; // expressed in percent, the formula for calculating: cpu_usage = (new_work_time - old_work_time) / (new_total_time - old_total_time) * 100
}

/**
* A message containing the amount of free memory of the agent.
*/
message FreeMemory {
    uint64 free_memory = 1; // expressed in bytes
}

/**
* A message that contains attributes of the agent.
*/
message AgentAttributes {
    CpuUsage cpu_usage = 1; /// The cpu usage of the agent.
    FreeMemory free_memory = 2; /// The amount of free memory of the agent.
}

/**
* A message containing the information about the workload state.
*/
message WorkloadState {
    WorkloadInstanceName instanceName = 1;
    ExecutionState executionState = 2; /// The workload execution state.
}

message WorkloadInstanceName {
    string workloadName = 1; /// The name of the workload.
    string agentName = 2; /// The name of the owning Agent.
    string id = 3; // A unique identifier of the workload.
}

/**
* A message containing the state information.
*/
message State {
    string apiVersion = 1; /// The current version of the API.
    WorkloadMap workloads = 2; /// A mapping from workload names to workload configurations.
    ConfigMap configs = 3; /// Configuration values which can be referenced in workload configurations.
}

/**
* This is a workaround for proto not supporing optional maps
* Workload names shall not be shorter than 1 symbol longer then 63 symbols and can contain only regular characters, digits, the "-" and "_" symbols.
*/
message WorkloadMap {
    map<string, Workload> workloads = 1;
}

/**
* A message containing the configuration of a workload.
*/
message Workload {
    optional string agent = 1; /// The name of the owning Agent.
    optional RestartPolicy restartPolicy = 2; /// An enum value that defines the condition under which a workload is restarted.
    Dependencies dependencies = 3; /// A map of workload names and expected states to enable a synchronized start of the workload.
    Tags tags = 4; /// A list of tag names.
    optional string runtime = 5; /// The name of the runtime e.g. podman.
    optional string runtimeConfig  = 6; /// The configuration information specific to the runtime.
    ControlInterfaceAccess controlInterfaceAccess = 7;
    ConfigMappings configs = 8; /// A mapping containing the configurations assigned to the workload.
}

/**
* This is a workaround for proto not supporing optional repeated values
*/
message Tags {
    repeated Tag tags = 1;
}

/**
* This is a workaround for proto not supporing optional maps
*/
message Dependencies {
    map<string, AddCondition> dependencies = 1;
}

/**
* A message to store a tag.
*/
message Tag {
    string key = 1; /// The key of the tag.
    string value = 2; /// The value of the tag.
}

/**
* An enum type describing the restart behavior of a workload.
*/
enum RestartPolicy {
    NEVER = 0; /// The workload is never restarted. Once the workload exits, it remains in the exited state.
    ON_FAILURE = 1; /// If the workload exits with a non-zero exit code, it will be restarted.
    ALWAYS = 2; /// The workload is restarted upon termination, regardless of the exit code.
}

message Error {
    string message = 1;
}

/**
* A message containing the parts of the control interface the workload as authorized to access.
* By default, all access is denied.
* Only if a matching allow rule is found, and no matching deny rules is found, the access is allowed.
*/
message ControlInterfaceAccess {
  repeated AccessRightsRule allowRules = 1; // Rules allow the access
  repeated AccessRightsRule denyRules = 2; // Rules denying the access
}

/**
* A message containing an allow or deny rule.
**/
message AccessRightsRule {
  oneof AccessRightsRuleEnum {
      StateRule stateRule = 1; // Rule for getting or setting the state
  }
}

/**
* Message containing a rule for getting or setting the state
**/
message StateRule {
  ReadWriteEnum operation = 1; // Defines which actions are allowed
  repeated string filterMasks = 2; // Pathes definind what can be accessed. Segements of path can be a wildcare "*".
}


/**
* An enum type describing which action is allowed.
*/
enum ReadWriteEnum {
  RW_NOTHING = 0; // Allow nothing
  RW_READ = 1;  // Allow read
  RW_WRITE = 2; // Allow write
  RW_READ_WRITE = 5; // Allow read and write
}

/**
* This is a workaround for proto not supporing optional maps
*/
message ConfigMappings {
    map<string, string> configs = 1;
}


/**
* This is a workaround for proto not supporing optional maps
*/
message ConfigMap {
    map<string, ConfigItem> configs = 1;
}



/**
* An enum type describing possible configuration objects.
*/
message ConfigItem {
    oneof ConfigItem {
        string String = 1;
        ConfigArray array = 2;
        ConfigObject object = 3;
    }
}


message ConfigArray {
    repeated ConfigItem values = 1;
}

message ConfigObject {
    map<string, ConfigItem> fields = 1;
}
