// Copyright (c) 2023 Elektrobit Automotive GmbH
//
// This program and the accompanying materials are made available under the
// terms of the Apache License, Version 2.0 which is available at
// https://www.apache.org/licenses/LICENSE-2.0.
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations
// under the License.
//
// SPDX-License-Identifier: Apache-2.0

/**
* The Ankaios communication protocol is used in the communcation between the following components:
*
* 1. Ankaios Agent and Ankaios Server,
*
* 2. Ankaios CLI and Ankaios Server,
*
* 3. Workload and Ankaios Server through the control interface.
*
* The protocol consists of the following top-level message types:
*
* 1. [ToServer](#toserver): agent/cli -> server
*
* 2. [FromServer](#fromserver): server -> agent/cli
*
*/
syntax = "proto3";
package ankaios;

service AgentConnection {
  rpc ConnectAgent (stream ToServer) returns (stream FromServer);
}

service CliConnection {
  rpc ConnectCli (stream ToServer) returns (stream FromServer);
}

/**
* Messages to the Ankaios server.
*/
message ToServer {
  oneof ToServerEnum {
    AgentHello agentHello = 1; /// This message is for internal usage only!
    UpdateWorkloadState updateWorkloadState = 2; /// A message to Ankaios server to update the execution state of a workload.
    Request request = 3;
    Goodbye goodbye = 4;
  }
}

/**
* Messages from the Ankaios server to e.g. the Ankaios agent.
*/
message FromServer {
  oneof FromServerEnum {
    UpdateWorkload updateWorkload = 1; /// A message containing lists of workloads to be added or deleted.
    UpdateWorkloadState updateWorkloadState = 2; /// A message containing list of workload execution states.
    Response response = 3; /// A message containing a response to a previous request.
  }
}

/**
* A message to the Ankaios server to register a new agent.
*/
message AgentHello {
  string agentName = 1; /// A unique agent name.
}

message Request {
  string requestId = 1;
  oneof RequestContent {
    UpdateStateRequest updateStateRequest = 2; /// A message to Ankaios server to update the State of one or more agent(s).
    CompleteStateRequest completeStateRequest = 3; /// A message to Ankaios server to request the complete state by the given request id and the optional field mask.
  }
}

/**
* A message to the Ankaios server to signalize a client (agent or cli) is shutting down.
*/
message Goodbye {
}

/**
* A message providing information about the workloads to be added and/or deleted.
*/
message UpdateWorkload {
  repeated AddedWorkload addedWorkloads = 1; /// A list of messages containing information about a workload to be added by an Ankaios agent.
  repeated DeletedWorkload deletedWorkloads = 2; /// A list of messages containing information about a workload to be deleted by an Ankaios agent.
}

/**
* A message containing information about a workload to be added to the Ankaios cluster.
*/
message AddedWorkload {
  WorkloadInstanceName instanceName = 1; /// The instance name of the workload.
  string runtime = 2; /// The name of the runtime, e.g., podman.
  map<string, AddCondition> dependencies = 3; /// A list of dependencies to other workloads with their corresponding, expected states. Can be used to enable a synchronized start of a workload.
  bool restart = 4; /// A flag indicating to restart the workload in case of an intentional or an unintentional stop of the workload.
  repeated Tag tags = 5; /// A list of tags.
  string runtimeConfig = 6; /// The configuration information specific to the runtime.
}

/**
* A message containing information about a workload to be deleted from the Anakaios system.
*/
message DeletedWorkload {
  WorkloadInstanceName instanceName = 1; /// The instance name of the workload.
  map<string, DeleteCondition> dependencies = 2; /// A list of dependencies to other workloads with their corresponding, expected states. Can be used to enable a synchronized stop of a workload.
}

/**
* An enum type describing the conditions for deleting a workload. Used for dependency management, and update strategies.
*/
enum DeleteCondition {
  DEL_COND_RUNNING = 0; /// The workload is operational.
  DEL_COND_NOT_PENDING_NOR_RUNNING = 1; /// The workload is not scheduled or running.
}

/**
* An enum type describing the expected workload state. Used for dependency management.
*/
enum AddCondition {
  ADD_COND_RUNNING = 0; /// The workload is operational.
  ADD_COND_SUCCEEDED = 1; /// The workload has successfully exited.
  ADD_COND_FAILED = 2; /// The workload has exited with an error or could not be started.
}


message ExecutionState {
  string additionalInfo = 1; /// The additional info contains more detailed information from the runtime regarding the execution state.
  oneof ExecutionStateEnum {
    AgentDisconnected agentDisconnected = 2; /// The exact state of the workload cannot be determined, e.g., because of a broken connection to the responsible agent.
    Pending pending = 3; /// The workload is going to be started eventually.
    Running running = 4; /// The workload is operational.
    Stopping stopping = 5; /// The workload is scheduled for stopping.
    Succeeded succeeded = 6; /// The workload has successfully finished its operation.
    Failed failed = 7; /// The workload has failed or is in a degraded state.
    NotScheduled notScheduled = 8; /// The workload is not scheduled to run at any agent. This is signalized with an empty agent in the workload specification.
    Removed removed = 9; /// The workload was removed from Ankaios. This state is used only internally in Ankaios. The outside world removed states are just not there.
  }
}

/**
* The workload was removed from Ankaios. This state is used only internally in Ankaios. The outside world removed states are just not there.
*/
enum Removed {
    REMOVED = 0;
}

/**
* The exact state of the workload cannot be determined, e.g., because of a broken connection to the responsible agent.
*/
enum AgentDisconnected {
    AGENT_DISCONNECTED = 0;
}

/**
* The workload is not scheduled to run at any agent. This is signalized with an empty agent in the workload specification.
*/
enum NotScheduled {
    NOT_SCHEDULED = 0;
}

/**
* The workload is going to be started eventually.
*/
enum Pending {
  PENDING_INITIAL = 0; /// The workload specification has not yet being scheduled
  PENDING_WAITING_TO_START = 1; /// The start of the workload will be triggered once all its dependencies are met.
  PENDING_STARTING = 2; /// Starting the workload was scheduled at the corresponding runtime.
  PENDING_STARTING_FAILED = 8; /// The starting of the workload by the runtime failed.
}

/**
* The workload is operational.
*/
enum Running {
  RUNNING_OK = 0; /// The workload is operational.
}

/**
* The workload is scheduled for stopping.
*/
enum Stopping {
    STOPPING = 0; /// The workload is being stopped.
    STOPPING_WAITING_TO_STOP = 1; /// The deletion of the workload will be triggered once neither 'pending' nor 'running' workload depending on it exists.
    STOPPING_REQUESTED_AT_RUNTIME = 2; /// This is an Ankaios generated state returned when the stopping was explicitly trigged by the user and the request was sent to the runtime.
    STOPPING_DELETE_FAILED = 8; /// The deletion of the workload by the runtime failed.
  }

/**
* The workload has successfully finished operation.
*/
enum Succeeded {
  SUCCEEDED_OK = 0; /// The workload has successfully finished operation.
}

/**
* The workload has failed or is in a degraded state.
*/
enum Failed {
  FAILED_EXEC_FAILED = 0; /// The workload has failed during operation
  FAILED_UNKNOWN = 1; /// The workload is in an unsupported by Ankaios runtime state. The workload was possibly altered outside of Ankaios.
  FAILED_LOST = 2; /// The workload cannot be found anymore. The workload was possibly altered outside of Ankaios or was auto-removed by the runtime.
}

/**
* A message containing the information about the workload state.
*/
message WorkloadState {
  WorkloadInstanceName instanceName = 1;
  ExecutionState executionState = 2; /// The workload execution state.
}

message WorkloadInstanceName {
  string workloadName = 1; /// The name of the workload.
  string agentName = 2; /// The name of the owning Agent.
  string id = 3; // A unique identifier of the workload.
}

/**
* A message containing the list the workload states.
*/
message UpdateWorkloadState {
  repeated WorkloadState workloadStates = 1; /// A list of workload states.
}

message Response {
  string requestId = 1;
  oneof ResponseContent {
    Success success = 2;
    Error error = 3;
    CompleteState completeState = 4;
    UpdateStateSuccess UpdateStateSuccess = 5;
  }
}

message Success {}

message Error {
  string message = 1;
}

message UpdateStateSuccess {
    repeated string addedWorkloads = 1; /// Workload istance names of workloads which will be started
    repeated string deletedWorkloads = 2; /// Workload instance names of workloads which will be stopped
}

message ApiVersion {
    string version = 1; /// The current version of the API.
}

/**
* A message containing the complete state of the Ankaios system.
* This is a response to the [CompleteStateRequest](#completestaterequest) message.
*/
message CompleteState {
  ApiVersion format_version = 1; /// The current version of the API.
  State startupState = 2; /// The State information at the startup of the Ankaios System.
  State desiredState = 3; /// The state the user wants to reach.
  repeated WorkloadState workloadStates = 4; /// The current states of the workloads.
}

// Common messages

/**
* A message containing a request for the complete/partial state of the Ankaios system.
* This is usually answered with a [CompleteState](#completestate) message.
*/
message CompleteStateRequest {
  repeated string fieldMask = 1; /// A list of symbolic field paths within the State message structure e.g. 'desiredState.workloads.nginx'.
}

/**
* A message containing a request to update the state of the Ankaios system.
* The new state is provided as state object.
* To specify which part(s) of the new state object should be updated
* a list of update mask (same as field mask) paths needs to be provided.
*/
message UpdateStateRequest {
  CompleteState newState = 1; /// The new state of the Ankaios system.
  repeated string updateMask = 2; /// A list of symbolic field paths within the state message structure e.g. 'desiredState.workloads.nginx' to specify what to be updated.
}

/**
* A message containing the state information.
*/
message State {
  map<string, Workload> workloads = 1; /// A mapping from workload names to workload configurations.
}

/**
* A message containing the configuration of a workload.
*/
message Workload {
  string agent = 1; /// The name of the owning Agent.
  bool restart = 2; /// A flag indicating to restart the workload in case of an intentional or an unintentional stop of the workload.
  map<string, AddCondition> dependencies = 3; /// A map of workload names and expected states to enable a synchronized start of the workload.
  repeated Tag tags = 4; /// A list of tag names.
  string runtime = 5; /// The name of the runtime e.g. podman.
  string runtimeConfig  = 6; /// The configuration information specific to the runtime.
}

/**
* A message to store a tag.
*/
message Tag {
  string key = 1; /// The key of the tag.
  string value = 2; /// The value of the tag.
}
