@startuml seq_set_state
!include ../../../../resources/doc/plantuml/clean.skin

box "Ankaios Ank"
    actor "user" as user
    participant Main as main
    participant "CliCommands" as cli_commands
    participant "<<task>>\nListen to Ankaios\nServer" as listen_to_server
    participant "<<task>>\nListen to Agent \nManager" as listen_to_manager
end box

box "Ankaios Server"
    participant "Ankaios Server" as server
end box

user -> main ++ : set state

== startup ==

... initialization ...

== command ==

main -> cli_commands ++ : set state
cli_commands ->> listen_to_manager ++: request update state
listen_to_manager ->> server --++ : request update state

cli_commands -> cli_commands ++: wait for the response

listen_to_server <<- server --++: changed workloads
listen_to_server ->> cli_commands --: changed workloads
deactivate cli_commands

alt no workloads changed
    cli_commands -> cli_commands: output "No workloads to update"
else workloads changed

    cli_commands ->> listen_to_manager ++: request complete state
    listen_to_manager ->> server --++ : request complete state

    cli_commands -> cli_commands ++: wait for the response
    listen_to_server <<- server --++: complete state
    listen_to_server ->> cli_commands --: complete state
    deactivate cli_commands
    cli_commands -> cli_commands: filter for changed workloads
    cli_commands -> cli_commands: print workload table

    loop until all changed workloads have been marked
        listen_to_server <<- server ++: update workload state
        cli_commands <<- listen_to_server --: update workload state
        alt updated workload in changed workloads
            alt updated workload reached desired state
                cli_commands -> cli_commands: mark workload as updated
            end
            cli_commands -> cli_commands: print updated workload table
        end
    end
end

main <<-- cli_commands --

destroy cli_commands
destroy listen_to_manager
destroy listen_to_server

user <- main -- : exit
destroy main

@enduml
