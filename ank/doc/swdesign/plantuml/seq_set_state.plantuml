@startuml seq_set_state
!include ../../../../resources/doc/plantuml/clean.skin

box "Ankaios Ank"
    actor "user" as user
    participant Main as main
    participant "CliCommands" as cli_commands
    participant "ServerConnection" as server_connection
    participant "<<task>>\nCommunicationsClient" as communications_client
end box

box "Ankaios Server"
    participant "Ankaios Server" as server
end box

user -> main ++ : set state

== startup ==

... initialization ...

== command ==

main -> cli_commands ++ : set state
cli_commands -> server_connection ++: request update state
server_connection ->> communications_client++: request update state
communications_client ->> server --++ : request update state

server_connection -> server_connection ++: wait for the response

communications_client <<- server --++: changed workloads
server_connection <<- communications_client --: changed workloads
deactivate server_connection
cli_commands <<-- server_connection--: changed workloads

== wait for workloads and print state ==

alt no workloads changed
    cli_commands -> cli_commands: output "No workloads to update"
else workloads changed

    cli_commands -> server_connection ++: request complete state
    server_connection ->> communications_client++: request complete state
    communications_client ->> server --++ : request complete state

    server_connection -> server_connection ++: wait for the response
    communications_client <<- server --++: complete state
    server_connection <<- communications_client --: complete state
    deactivate server_connection
    cli_commands <<- server_connection --: complete state
    cli_commands -> cli_commands: filter for changed workloads

    cli_commands -> server_connection ++: take missed messages
    return missed messages
    cli_commands -> cli_commands: filter for update workload\nstate messages
    cli_commands -> cli_commands: mark all worloads which\nreached desired state

    cli_commands -> cli_commands: print workload table

    loop until all changed workloads have been marked
        cli_commands -> server_connection ++: read next update workload state
        server_connection -> server_connection ++: wait for update workload state

        communications_client <<- server ++: update workload state
        server_connection <<- communications_client --: update workload state
        deactivate server_connection
        cli_commands <<- server_connection --: update workload state

        alt updated workload in changed workloads
            alt updated workload reached desired state
                cli_commands -> cli_commands: mark workload as updated
            end
            cli_commands -> cli_commands: print updated workload table
        end
    end
end

main <<-- cli_commands --



user <- main -- : exit

@enduml
