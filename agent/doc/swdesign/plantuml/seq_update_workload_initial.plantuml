@startuml seq_update_workload_initial
!include ../../../../resources/doc/plantuml/clean.skin

box "Ankaios Agent"
    participant "AgentManager" as manager

    participant "RuntimeManager" as runtime_manager
    participant "RuntimeFacade" as wl_facade

    participant "Specific Runtime Connector\n e.g., PodmanRuntime" as runtime

end box

box "Ankaios Server"
    participant "Ankaios Server" as server
end box

activate manager
activate server

note over manager, server
The communication between the Agent Manager and the Ankaios Server is simpliefied here. The actuall calls go over the Communication Middleware.
end note

manager <<- server ++: UpdateWorkload

... general steps of handling the UpdateWorkload command ...

manager -> runtime_manager ++: handle update workload

alt first update workload call for the current agent execution

loop for each runtime connector
    runtime_manager -> runtime_manager ++--: finds existing workloads for that runtime

    loop for each found running workload
        alt found running workload is required
            runtime_manager -> runtime_manager++--: create control interface

            alt found running workload has different config
                runtime_manager -> wl_facade++: delete workload
                wl_facade ->> wl_facade ++: decopule the specific actions
                wl_facade -> runtime++: perform delete actions
                runtime -->> wl_facade--
                wl_facade -->> runtime_manager--
                runtime_manager -> runtime_manager ++--: add workload
                note right
                    see add workload digram for details
                endnote
                deactivate wl_facade
            else found running workload is identical to required workload
                runtime_manager -> wl_facade++: resume workload
                wl_facade ->> wl_facade ++: decopule the specific actions
                wl_facade -> runtime++: perform resume actions
                runtime -->> wl_facade--
                deactivate wl_facade
                wl_facade -->> runtime_manager--
            end

            runtime_manager -> runtime_manager++--: store new workload

        else found running workload is not required anymore
            runtime_manager -> wl_facade: delete (found running workload)
        end
    end
end

loop remaining added workloads not found in the list of running workloads
        runtime_manager -> runtime_manager ++--: add workload
        note right
            see add workload digram for details
        endnote
end


else subsequent update workload call
... see dedicated digram for susequent calls ...
end

runtime_manager -->> manager --

...

manager ->> server --++: forward UpdateWorkloadState

...

@enduml
